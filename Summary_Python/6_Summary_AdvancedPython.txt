(1) Usage of special methods:

import collections
Card=collections.namedtuple('Card',['rank','suit'])

It created a class with name "Card" and its 2 attributs, rank and suit

(2)

class FrenchDeck:
    ranks= [str(r) for r in range(2,11)]+list("JQKA")
    suits= 'spade diamonds clubs hearts'.split()
    
    def __init__(self):
        self._cards= [Card(rank,suit) for suit in self.suits for rank in self.ranks]
    def __len__(self):
        return len(self._cards)
    def __getitem__(self,position):
        return self._cards[position]

Here 3 special methods are used:

__getitem__() used for element at a position with indecing []
__len__() is for len() function.

using __getitem__(), we have given all the elements of its attributes deck_cards a position and so deck became an iterator.

Card('1','diamonds')

-- Card(rank='1', suit='diamonds')

deck=FrenchDeck()
deck.suits -- ['Spade', 'Diamonds', 'Clubs', 'Hearts']
deck.ranks -- ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']

len(deck) -- 52
deck[0] -- Card(rank='2', suit='Spade')
deck[-1] -- Card(rank='A', suit='Hearts')
deck[:3]

# picking a random card
import random
random.choice(deck)

(3)

You write len(my_object) and, if my_object is an instance of a user-defined class, then
Python calls the __len__ method you implemented.

(4)

The __repr__ special method is called by the repr built-in to get the string represen‐
tation of the object for inspection. Without a custom __repr__, Python’s console
would display a Vector instance <Vector object at 0x10e100070>.

 __str__ is called by the str() built-in and implicitly used by the print
function. It should return a string suitable for display to end users.

Basically, bool(x) calls x.__bool__()

import math
class Vector:
    def __init__(self,x=0,y=0):
        self.x=x
        self.y=y
    def __repr__(self):
        return f'Vector({self.x!r},{self.y!r})'
    def __abs__(self):
        return math.hypot(self.x,self.y)
    def __bool__(self):
        return bool(abs(self))
    def __add__(self,other):
        self.x=self.x+other.x
        self.y=self.y+other.y
        return Vector(x,y)
    def __mul__(self,scalar):
        return Vector(self.x*scalar,self.y*scalar)
    
--------------------------------------------------------------------------------------------------------

(5)

Before creating Python, Guido was a contributor to the ABC language—a 10-year
research project to design a programming environment for beginners. ABC intro‐
duced many ideas we now consider “Pythonic”: generic operations on different types
of sequences, built-in tuple and mapping types, structure by indentation, strong
typing without variable declarations, and more. It’s no accident that Python is so
user-friendly

(6)

Built-In Sequences:

A. Container sequences

Can hold items of different types, including nested containers. Some examples:
list, tuple, and collections.deque.

B. Flat sequences

Hold items of one simple type. Some examples: str, bytes, and array.array.

A container sequence holds references to the objects it contains, which may be of any
type, while a flat sequence stores the value of its contents in its own memory space,
not as distinct Python objects.

Every Python object in memory has a header with metadata.

(7)

The simplest Python object, a float, has a value field and two metadata
fields:

• ob_refcnt: the object’s reference count
• ob_type: a pointer to the object’s type
• ob_fval: a C double holding the value of the float

On a 64-bit Python build, each of those fields takes 8 bytes.

(8)

Another way of grouping sequence types is by mutability:

A. Mutable sequences

For example, list, bytearray, array.array, and collections.deque.

B. Immutable sequences

For example, tuple, str, and bytes

how mutable sequences inherit all methods from immutable sequences, and implement several additional methods.

The built-in concrete
sequence types do not actually subclass the Sequence and MutableSequence abstract
base classes (ABCs), but they are virtual subclasses registered with those ABCs

from collections import abc
issubclass(tuple,abc.Sequence)

-- True

from collections import abc
issubclass(list,abc.MutableSequence)

-- True

(9)

For brevity, many Python programmers refer to list comprehen‐
sions as listcomps, and generator expressions as genexps. I will use
these words as well.

In Python code, line breaks are ignored inside pairs of [], {}, or ().
So you can build multiline lists, listcomps, tuples, dictionaries, etc.,
without using the \ line continuation escape, which doesn’t work if
you accidentally type a space after it.

when coding a multiline list literal, it is thoughtful to put a comma after the
last item, making it a little easier for the next coder to add one
more item to that list, and reducing noise when reading diffs.

(10)

However, variables assigned with the “Walrus operator” := remain accessible after
those comprehensions or expressions return—unlike local variables in a function.
PEP 572—Assignment Expressions defines the scope of the target of := as the enclos‐
ing function, unless there is a global or nonlocal declaration for that target.

lst=['a','b','c']
codes=[last := ord(x) for x in lst]
print(codes,last)

-- [97, 98, 99] 99

print(x)

-- NameError: name 'x' is not defined

(11)

symbols = '$¢£¥€¤'
list(filter(lambda c:c > 127,map(ord,symbols)))

-- [162, 163, 165, 8364, 164]

(12)

A genexp (generator expression) saves memory because it yields items
one by one using the iterator protocol instead of building a whole list just to feed
another constructor.

symbols = '$¢£¥€¤'
tuple(ord(symbol) for symbol in symbols)

-- (36, 162, 163, 165, 8364, 164)

import array
array.array('I', (ord(symbol) for symbol in symbols))

-- array('I', [36, 162, 163, 165, 8364, 164])

(13)

The array constructor takes two arguments, so the parentheses around the gen‐
erator expression are mandatory. The first argument of the array constructor
defines the storage type used for the numbers in the array.


